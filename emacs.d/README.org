#+TITLE: Emacs Config
#+AUTHOR: Dan Barbarito

* Install
  #+BEGIN_SRC sh
    cd ~
    git clone git@github.com:jcouyang/.emacs.d.git
    cd .emacs.d
    cask install
  #+END_SRC

* Theme

  #+BEGIN_SRC emacs-lisp
    (load-theme 'base16-ashes t)
  #+END_SRC

  more themes here

  [[http://emacsthemes.caisah.info/installed-emacs-themes/]]

* Fonts

  #+BEGIN_SRC emacs-lisp

    ;;      (set-fontset-font t 'han '("PingFang SC"))
    (require 'unicode-fonts)
    (unicode-fonts-setup)
    ;; (set-default-font "Monaco-12:width=normal:weight=light")
    ;; (set-default-font "DejaVu Sans Mono:width=normal:weight=normal")

    ;; (defun darwin-set-emoji-font (frame)
    ;;   "Adjust the font settings of FRAME so Emacs NS/Cocoa can display emoji properly."
    ;;   (if (eq system-type 'darwin)
    ;;       (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)))
    ;; ;; For when emacs is started with Emacs.app
    ;; (darwin-set-emoji-font nil)
    ;; ;; Hook for when a cocoa frame is created with emacsclient
    ;; ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
    ;; (add-hook 'after-make-frame-functions 'darwin-set-emoji-font)



    (defun my-add-
        pretty-lambda ()
        "make some word or string show as pretty Unicode symbols"
        (setq prettify-symbols-alist
              '(
                ("lambda" . ?λ)
                ("->" . ?→)
                ("=>" . ?⇒)
                ("!=" . ?≠)
                ("===" . ?≡)
                ("!==" . ?≢)
                (">=" . ?⩾)
                ("<=" . ?⩽)
                ("<|" . ?⊲)
                ("|>" . ?⊳)
                (">->" . ?↣)
                ("~>" . ?↝)
                (">=>" . ?⟾)
                )))

    ;; (add-hook 'clojure-mode-hook 'my-add-pretty-lambda)
    ;; (add-hook 'haskell-mode-hook 'my-add-pretty-lambda)
    ;; (add-hook 'js2-mode-hook 'my-add-pretty-lambda)
    ;; (add-hook 'javascript-mode-hook 'my-add-pretty-lambda)
    ;; (add-hook 'coffee-mode-hook 'my-add-pretty-lambda)

    ;; (global-prettify-symbols-mode 1)
  #+END_SRC

* Global General Modes
  - =emacsclient=  [[(server)]]
  - Meta key =Command= [[(meta-key)]]
  #+BEGIN_SRC emacs-lisp -n -r
    (if (and (fboundp 'server-running-p) 
             (not (server-running-p)))
        (server-start)) ;(ref:server)
    (global-superword-mode 1)
    (when (eq system-type 'darwin)
      (setq mac-option-modifier 'alt)
      (setq mac-command-modifier 'meta)); (ref:meta-key)
    (tool-bar-mode -1)
    (setq inhibit-startup-message t)
    (delete-selection-mode 1) ; delete selection when paste
    (global-auto-revert-mode 1)  ;auto revert buffers when changed on dis
    (global-diff-hl-mode)
    (add-hook 'local-write-file-hooks
              (lambda ()
                (delete-trailing-whitespace)
                nil))
    (setq-default
     make-backup-files nil ; stop creating those backup~ file
     auto-save-default nil

     indent-tabs-mode nil                   ;use spaces instead of tabs
     c-hungry-delete-key t                  ;delete more than one space
     electric-pair-mode nil
     )
    (electric-indent-mode t)
    (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
    (setq create-lockfiles nil)
    (global-linum-mode 1)
    ;; If the *scratch* buffer is killed, recreate it automatically
    ;; FROM: Morten Welind
    ;;http://www.geocrawler.com/archives/3/338/1994/6/0/1877802/
    (save-excursion
      (set-buffer (get-buffer-create "*scratch*"))
      (lisp-interaction-mode)
      (make-local-variable 'kill-buffer-query-functions)
      (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer))

    (defun kill-scratch-buffer ()
      ;; The next line is just in case someone calls this manually
      (set-buffer (get-buffer-create "*scratch*"))
      ;; Kill the current (*scratch*) buffer
      (remove-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
      (kill-buffer (current-buffer))
      ;; Make a brand new *scratch* buffer
      (set-buffer (get-buffer-create "*scratch*"))
      (lisp-interaction-mode)
      (make-local-variable 'kill-buffer-query-functions)
      (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
      ;; Since we killed it, don't let caller do that.
      nil)

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Terminal notifier 
    ;; requires 'brew install terminal-notifier'
    ;; stolen from erc-notifier

    (defvar terminal-notifier-command (executable-find "terminal-notifier") "The path to terminal-notifier.")

                                            ; (terminal-notifier-notify "Emacs notification" "Something amusing happened")

    (defun terminal-notifier-notify (title message)
      "Show a message with 
    terminal-notifier-command
    ."
      (start-process "terminal-notifier"
                     "terminal-notifier"
                     terminal-notifier-command
                     "-title" title
                     "-message" message
                     "-activate" "org.gnu.Emacs"))

    (defun timed-notification (time msg)
      (interactive "sNotification when (e.g: 2 minutes, 60 seconds, 3 days): \nsMessage: ")
      (run-at-time time nil (lambda (msg) (terminal-notifier-notify "Emacs" msg)) msg))
  #+END_SRC

* User Settings

  #+BEGIN_SRC emacs-lisp
    (when (file-readable-p ".user.el") (load ".user.el"))
  #+END_SRC

* Modes
** help
   #+BEGIN_SRC emacs-lisp
     (require 'pp-c-l)
     (add-hook 'help-mode-hook 'pretty-control-l-mode)
   #+END_SRC
** dot
   #+BEGIN_SRC emacs-lisp
                                             ; (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
   #+END_SRC

** cider

   [[https://github.com/clojure-emacs/cider#keyboard-shortcuts]]

   #+BEGIN_SRC emacs-lisp
     (require 'cider)
     (setq org-babel-clojure-backend 'cider)
     (add-hook 'cider-repl-mode-hook #'company-mode)
     (add-hook 'cider-mode-hook #'company-mode)
     ;; (setq nrepl-log-messages t
     ;;       cider-repl-use-clojure-font-lock t
     ;;       cider-font-lock-dynamically '(macro core function var)
     ;;       nrepl-hide-special-buffers t
     ;;       cider-overlays-use-font-lock t)
   #+END_SRC

** company
   
   Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part. Search through the completions with C-s, C-r and C-o. Press M-(digit) to quickly complete with one of the first 10 candidates.

   When the completion candidates are shown, press <f1> to display the documentation for the selected candidate, or C-w to see its source. Not all back-ends support this.

   document

   #+BEGIN_SRC emacs-lisp -n -r
     (require 'company)
     (require 'company-tern)
     (require 'company-quickhelp)
     (require 'company-go)
     (require 'company-web-html)                          ; load company mode html backend
     (require 'company-web-jade)                          ; load company mode jade backend
     (require 'company-web-slim)                          ; load company mode slim backend

     (add-to-list 'company-backends 'company-tern)
     (add-to-list 'company-backends 'company-go)
     (add-to-list 'company-backends 'company-yasnippet t)
     (add-to-list 'company-backends 'company-web-html)

     (setq company-dabbrev-downcase 1)
     (setq company-tooltip-align-annotations t)
     (setq company-idle-delay 0.3)
     (company-quickhelp-mode 1)
     (global-company-mode)

   #+END_SRC

   #+RESULTS:
   : t

** emmet
   #+BEGIN_SRC emacs-lisp -n -r
     (require 'emmet-mode)
     (add-hook 'web-mode-hook 'emmet-mode)
   #+END_SRC
** deft
   #+BEGIN_SRC emacs-lisp
     (setq
      deft-extension "org"
      deft-directory "~/Dropbox/org/"
      deft-text-mode 'org-mode
      deft-recursive t
      deft-use-filename-as-title t
      deft-file-naming-rules
      '((noslash . "-")
        (nospace . "-")
        (case-fn . downcase))
      deft-use-filter-string-for-filename t
      deft-org-mode-title-prefix t
      )
   #+END_SRC

   #+RESULTS:
   : t

** helm
#+BEGIN_SRC emacs-lisp
(require 'helm)
(define-key helm-map (kbd "C-s") 'helm-next-line)
(define-key helm-map (kbd "C-r") 'helm-previous-line)
#+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp -n -r
     (projectile-global-mode)
     (setq projectile-completion-system 'ido
           projectile-enable-caching t; (ref:caching)
           projectile-indexing-method 'alien); (ref:indexing)

   #+END_SRC
** ido
   #+BEGIN_SRC emacs-lisp -n -r
     (ido-ubiquitous-mode)
     (ido-vertical-mode)
     (require 'flx-ido)
     (ido-mode 1)
     (ido-everywhere 1)
     (flx-ido-mode 1)
     ;; disable ido faces to see flx highlights.
     (setq ido-enable-flex-matching t)
     (setq ido-use-faces nil)
   #+END_SRC
** iedit
   #+BEGIN_SRC emacs-lisp
     (require 'iedit)
     (setq iedit-unmatched-lines-invisible-default t)
   #+END_SRC

** flycheck
   #+BEGIN_SRC emacs-lisp
     (require 'flycheck)
     ;;(add-hook 'after-init-hook #'global-flycheck-mode)
     (setq-default flycheck-disabled-checkers
                   (append flycheck-disabled-checkers
                           '(javascript-jshint)))
     (setq-default flycheck-disabled-checkers
                   (append flycheck-disabled-checkers
                           '(json-jsonlist)))
   #+END_SRC

** js2-mode

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
     (add-to-list 'auto-mode-alist '("\\.sjs$" . js2-mode))
     (add-to-list 'auto-mode-alist '("\\.es6$" . js2-mode))
     (setq js2-allow-rhino-new-expr-initializer nil)
     (setq js2-enter-indents-newline t)
     (setq js2-global-externs '("module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON"))
     (setq js2-idle-timer-delay 0.1)
     (setq js2-indent-on-enter-key nil)
     (setq js2-mirror-mode nil)
     (setq js2-strict-inconsistent-return-warning nil)
     (setq js2-auto-indent-p t)
     (setq js2-include-rhino-externs nil)
     (setq js2-include-gears-externs nil)
     (setq js2-concat-multiline-strings 'eol)
     (setq js2-rebind-eol-bol-keys nil)
     (setq js2-mode-show-parse-errors t)
     (setq js2-mode-show-strict-warnings nil)
     (require 'js2-refactor)
     (add-hook 'js2-mode-hook #'js2-refactor-mode)
     (js2r-add-keybindings-with-prefix "C-c C-m")
   #+END_SRC

   Got most of that from [[https://github.com/magnars/.emacs.d/blob/master/setup-js2-mode.el][Magnars' .emacs.d]].

** ruby-mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'ruby-mode-hook 'robe-mode)
                                             ;(setq rbenv-installation-dir "/usr/local/bin/")
                                             ;(defadvice inf-ruby-console-auto (before activate-rbenv-for-robe activate)
                                             ;  (rbenv-use-corresponding))
   #+END_SRC

   #+RESULTS:
   : inf-ruby-console-auto

** json-mode

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
     (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.tag\\'" . web-mode))
   #+END_SRC

   =json-mode= adds a bit better syntax highlighting for =.json= files.

** Nyancati

   #+BEGIN_SRC emacs-lisp
     (nyan-mode t)
   #+END_SRC

** latex
   #+BEGIN_SRC emacs-lisp
     (setq tex-compile-commands '(("xelatex %r")))
     (setq tex-command "xelatex")
     (setq-default TeX-engine 'xelatex)

     (setq org-latex-pdf-process
           '("xelatex -interaction nonstopmode -output-directory %o %f"
             "xelatex -interaction nonstopmode -output-directory %o %f"
             "xelatex -interaction nonstopmode -output-directory %o %f"))

     (setq locate-command "mdfind")
     (setenv "PATH" (concat (getenv "PATH") ":/usr/local/share/npm/bin:/usr/local/bin:/usr/texbin"))
     (setq exec-path (append exec-path '("/usr/local/bin" "~/.rbenv/shims" "/usr/texbin")))
   #+END_SRC

   #+RESULTS:
   | /usr/bin | /bin | /usr/sbin | /sbin | /usr/local/Cellar/emacs/24.5/libexec/emacs/24.5/x86_64-apple-darwin14.3.0 | /usr/local/bin | /usr/texbin | /usr/local/bin | ~/.rbenv/shims | /usr/texbin |

** on-screen
   #+BEGIN_SRC emacs-lisp
     (on-screen-global-mode 1)
     (setq on-screen-highlight-method 'narrow-line)
   #+END_SRC

** key chord
   #+BEGIN_SRC emacs-lisp
     (key-chord-mode 0)
     (setq key-chord-two-keys-delay 0.03)
   #+END_SRC

** org
*** latex
    #+BEGIN_SRC emacs-lisp
      (require 'ox-latex)
      (add-to-list 'org-latex-classes
                   '("tufte" "\\documentclass[11pt,twoside,openright]{tufte-book}"
                     ("\\chapter{%s}" . "\\chapter*{%s}")
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
    #+END_SRC

*** Default Settings
    :LOGBOOK:
    - Note taken on [2017-06-16 Fri 01:21] \\
      Cool note
    - Note taken on [2017-06-16 Fri 00:14] \\
      Add 'go-to org dir' key binding
    :END:
    =org-agenda-files= 
    [[(include-all)]]

    #+BEGIN_SRC emacs-lisp -n -r
      (require 'org-bullets)
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (setq org-directory "~/Dropbox/org")
      (let ((todo "~/Dropbox/org/todo.org"))
        (when (file-readable-p todo)
          (setq org-agenda-files '("~/Dropbox/org/")) (ref:include-all)
          (setq initial-buffer-choice (lambda ()
                                        (org-agenda nil "n")
                                        (delete-other-windows)
                                        (current-buffer)
                                        ))
          ))
      (setq org-default-notes-file "~/Dropbox/org/refile.org")
      (setq org-mobile-inbox-for-pull "~/Dropbox/org/flagged.org")
      (setq org-mobile-directory "~/Dropbox/org/mobile")

      (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

      (setq org-startup-folded t)
      (setq org-startup-indented nil)
      (setq org-startup-with-inline-images t)
      (setq org-startup-truncated t)
      (setq org-refile-targets '((org-agenda-files :maxlevel . 5)))
      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
      (setq org-confirm-babel-evaluate nil)
      (setq org-use-speed-commands t)
      (setq org-default-notes-file (concat org-directory "/todo.org"))
      (setq org-show-notification-handler
            (lambda (msg) (timed-notification nil msg)))
    #+END_SRC

*** structure template
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-structure-template-alist '("E" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC\n"))
      (add-to-list 'org-structure-template-alist '("S" "#+BEGIN_SRC shell-script\n?\n#+END_SRC\n"))
      (add-to-list 'org-structure-template-alist '("J" "#+BEGIN_SRC js\n?\n#+END_SRC\n"))
      (add-to-list 'org-structure-template-alist '("jm" "#+BEGIN_SRC js :session mozilla\n?\n#+END_SRC\n"))
      (add-to-list 'org-structure-template-alist '("C" "#+BEGIN_SRC clojure\n?\n#+END_SRC\n"))
      (add-to-list 'org-structure-template-alist '("d" "#+BEGIN_SRC ditaa :file ? :exports results\n?#+END_SRC\n"))
    #+END_SRC

*** Clocking
    #+BEGIN_SRC emacs-lisp
      (setq org-clock-persist 'history)
      (org-clock-persistence-insinuate)
    #+END_SRC

    #+RESULTS:
    | org-clock-save | ensime-kill-emacs-hook-function | recentf-save-list | pcache-kill-emacs-hook | ido-kill-emacs-hook | flycheck-global-teardown | bookmark-exit-hook-internal | company-clang-set-prefix | server-force-stop | org-babel-remove-temporary-directory |

*** Capture
    #+BEGIN_SRC emacs-lisp
      ;;  (require 'org-trello)
      (setq org-default-notes-file (concat org-directory "/todo.org"))
      ;; (custom-set-variables '(org-trello-files `(,org-default-notes-file)))

      (setq org-capture-templates
            '(
              ("t" "Todo" entry (file org-default-notes-file) "* TODO %?\n  %u\n  %a")
              ))
      (setq org-todo-keywords
            '((sequence
               "TODO(t)"
               "IN PROGRESS(p!)"
               "HOLD(h!)"
               "WAITING(w)"
               "SOMEDAY(s)"
               "|"
               "DONE(d!)"
               "CANCELLED(c)"
               )))
      (setq org-todo-keyword-faces
            '(
              ("IN PROGRESS" . 'warning)
              ("DOING" . 'warning)
              ("HOLD" . 'font-lock-keyword-face)
              ("WAITING" . 'font-lock-builtin-face)
              ("SOMEDAY" . 'font-lock-doc-face)
              ))
      (setq org-log-into-drawer t)
    #+END_SRC

*** Publish
    #+BEGIN_SRC emacs-lisp
      (setq org-html-validation-link nil)
      (setq org-publish-project-alist
            '(("fpjs-static"
               :base-directory "~/Documents/Books/functional-javascript/images"
               :base-extension "png\\|jpg\\|jpeg\\|gif"
               :publishing-directory "~/Dropbox/functional-javascript/manuscript/images"
               :recursive t
               :publishing-function org-publish-attachment)
              ("fpjs-md"
               :base-directory "~/Documents/Books/functional-javascript"
               :base-extension "org"
               :publishing-directory "~/Dropbox/functional-javascript/manuscript"
               :sub-superscript ""
               :recursive t
               :publishing-function org-leanpub-publish-to-leanpub
               :html-extension "md"
               :body-only t)
              ("fpjs" :components ("fpjs-static" "fpjs-md"))))
    #+END_SRC

*** org-deck
    #+BEGIN_SRC emacs-lisp
      (setq org-deck-base-url "https://blog.oyanglul.us/deck.js")
      (setq org-deck-theme "web-2.0.css")
      (setq org-deck-transition "horizontal-slide.css")
      (setq org-deck-postamble "<p>%t - %a</p>")
    #+END_SRC

    #+RESULTS:
    : <p>%t - %a</p>

*** Agenda
    #+BEGIN_SRC emacs-lisp
      ;; create the file for the agendas if it doesn't exist
      (appt-activate 0)              ; activate appt (appointment notification)

      (org-agenda-to-appt)           ; add appointments on startup

      ;; add new appointments when saving the org buffer, use 'refresh argument to do it properly
      ;; (defun my-org-agenda-to-appt-refresh () (org-agenda-to-appt 'refresh))
      ;; (defun my-org-mode-hook ()
      ;;   (add-hook 'after-save-hook 'my-org-agenda-to-appt-refresh nil 'make-it-local))
      ;; (add-hook 'org-mode-hook 'my-org-mode-hook)
      (add-hook 'org-mode-hook (lambda ()
                                 (visual-line-mode 1)))
      (require 'notifications)
      (defun my-appt-disp-window-function (min-to-app new-time msg)
        (notifications-notify :title (format "Appointment in %s min" min-to-app) :body msg))
      (setq appt-disp-window-function 'my-appt-disp-window-function)
      (setq appt-delete-window-function (lambda (&rest args)))

      ;; add state to the sorting strategy of todo
      (setcdr (assq 'todo org-agenda-sorting-strategy) '(todo-state-up priority-down category-keep))
    #+END_SRC

*** babel
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((js . t)
         (clojure . t)
         ))
    #+END_SRC

*** pandoc
    #+BEGIN_SRC emacs-lisp
      (setq org-pandoc-options-for-revealjs '(
                                              (self-contained . t)
                                              (variable . "theme=solarized")
                                              (section-divs . t)
                                              (standalone . nil)))
    #+END_SRC

    #+RESULTS:
    : ((self-contained . t) (variable . theme=solarized) (section-divs . t) (standalone))

** pallet

   #+BEGIN_SRC emacs-lisp
     (require 'pallet)
     (pallet-mode t)
   #+END_SRC

** smartparens

   #+BEGIN_SRC emacs-lisp
     (require 'smartparens-config)
     (smartparens-global-mode t)

     (show-smartparens-global-mode t)
   #+END_SRC

   #+RESULTS:
   | turn-on-smartparens-strict-mode |
** sequential-command
   #+BEGIN_SRC emacs-lisp
     (require 'sequential-command)
     (define-sequential-command seq-home
       back-to-indentation beginning-of-line seq-return)
     (define-sequential-command seq-end
       end-of-line end-of-buffer seq-return)
     (global-set-key "\C-a" 'seq-home)
     (global-set-key "\C-e" 'seq-end)
     (define-sequential-command seq-company-tab company-complete-common company-complete-selection)

     (define-key company-active-map (kbd "TAB") 'seq-company-tab)
     (define-key company-active-map [tab] 'seq-company-tab)
   #+END_SRC

   #+RESULTS:
   : seq-company-tab

** scala-mode
   #+BEGIN_SRC emacs-lisp
     (require 'ensime)
     (add-to-list 'auto-mode-alist '("\\.sc$" . scala-mode))
     (add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))
     (add-hook 'scala-mode-hook 'ensime-mode)
   #+END_SRC
** tern
   A JavaScript code analyzer

   definition, find type of, rename variable


   Needs the =tern= binary to be present, which can be installed with =npm=:

   #+BEGIN_SRC shell-script
     sudo npm install -g tern
   #+END_SRC

   #+BEGIN_SRC lisp
     (bin-file (expand-file-name "../bin/tern" (file-name-directory (file-truename script-file)))))
   #+END_SRC

   #+BEGIN_EXAMPLE
   M-.
       Jump to the definition of the thing under the cursor.
   M-,
       Brings you back to last place you were when you pressed M-..
   C-c C-r
       Rename the variable under the cursor.
   C-c C-c
       Find the type of the thing under the cursor.
   C-c C-d
       Find docs of the thing under the cursor. Press again to open the associated URL (if any).
   #+END_EXAMPLE

   #+BEGIN_SRC emacs-lisp
     (add-hook 'js-mode-hook (lambda () (tern-mode t)))
     (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
     (add-hook 'web-mode-hook (lambda () (tern-mode t)))
     (setq tern-command '("/usr/local/bin/tern" "--no-port-file"))
   #+END_SRC

   See the [[http://ternjs.net/][project homepage]] for more info.
** textmate
   #+BEGIN_SRC emacs-lisp
     (require 'textmate)
     (textmate-mode)
     (bind-keys
      :map *textmate-mode-map*
      ("M-}" . textmate-shift-right)
      ("M-{" . textmate-shift-left)
      ("M-/" . comment-or-uncomment-region-or-line)
      ("M-l" . textmate-select-line)
      )

   #+END_SRC

   #+RESULTS:
   : textmate-select-line

** Prompt Behavior

   #+BEGIN_SRC emacs-lisp -n -r
     (defalias 'yes-or-no-p 'y-or-n-p)
     (setq kill-buffer-query-functions
           (remq 'process-kill-buffer-query-function
                 kill-buffer-query-functions))
   #+END_SRC

   In [[(y-or-n)][line (y-or-n)]] all "yes" or "no" questions are aliased to "y" or "n". We don't really want to type a full word to answer a question from Emacs

   Also Emacs should be able to kill processes without asking ([[(process-query)][line (process-query)]]). Got that snippet from: [[http://www.masteringemacs.org/articles/2010/11/14/disabling-prompts-emacs/]]

** [[http://web-mode.org/][web-mode]]
   #+BEGIN_SRC emacs-lisp
     (require 'editorconfig)
     (editorconfig-mode 1)
     (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.scss\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.sass\\'" . web-mode))
   #+END_SRC

** yasnippet
   #+BEGIN_SRC emacs-lisp
     (yas-global-mode 1)
   #+END_SRC

** ditaa
   #+BEGIN_SRC emacs-lisp
     (setq org-ditaa-jar-path "/usr/local/Cellar/ditaa/0.9/libexec/ditaa0_9.jar")
   #+END_SRC
** go
   #+BEGIN_SRC emacs-lisp
     (require 'go-autocomplete)
     (add-hook 'before-save-hook #'gofmt-before-save)
     (setenv "GOPATH" "/Users/danbarbarito/.go")
   #+END_SRC
** magit
   #+BEGIN_SRC emacs-lisp
     (require 'magit)
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC
** redo+
   #+BEGIN_SRC emacs-lisp
     (require 'redo+)
     (global-set-key (kbd "C-?") 'redo)
   #+END_SRC
** smex
   #+BEGIN_SRC emacs-lisp
     (require 'smex)
     (smex-initialize)
     (defadvice smex (around space-inserts-hyphen activate compile)
       (let ((ido-cannot-complete-command 
              `(lambda ()
                 (interactive)
                 (if (string= " " (this-command-keys))
                     (insert ?-)
                   (funcall ,ido-cannot-complete-command)))))
         ad-do-it))
   #+END_SRC
** exec-path-from-shell
  #+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  #+END_SRC
** elpy
  #+BEGIN_SRC emacs-lisp
    (elpy-enable)
  #+END_SRC
** rust
  #+BEGIN_SRC emacs-lisp
  (require 'rust-mode)
  (require 'cargo)
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
  #+END_SRC
** vc
#+BEGIN_SRC emacs-lisp
(require 'vc-fossil)
(autoload 'vc-fossil-registered "vc-fossil")
(add-to-list 'vc-handled-backends 'Fossil)
#+END_SRC
** c/c++
#+BEGIN_SRC emacs-lisp
(require 'cmake-project)
(defun maybe-cmake-project-hook ()
  (if (file-exists-p "CMakeLists.txt") (cmake-project-mode)))
(add-hook 'c-mode-hook 'maybe-cmake-project-hook)
(add-hook 'c++-mode-hook 'maybe-cmake-project-hook)

(require 'cmake-mode)
#+END_SRC
* Key Bindings
** smartparens
   #+BEGIN_SRC emacs-lisp
     (bind-keys
      :map smartparens-mode-map
      ("C-M-f" . sp-forward-sexp)
      ("C-M-b" . sp-backward-sexp)
      ("C-S-i" . sp-down-sexp)
      ("C-S-o" . sp-up-sexp)
      ("M-A-i" . sp-backward-down-sexp)
      ("M-A-o" . sp-backward-up-sexp)
      ("C-M-a" . sp-beginning-of-sexp)
      ("C-M-e" . sp-end-of-sexp)
      ("C-M-n" . sp-next-sexp)
      ("C-M-p" . sp-previous-sexp)
      ("C-M-d" . sp-kill-sexp)
      ("C-M-<backspace>" . sp-backward-kill-sexp)
      ("C-M-k" . sp-kill-hybrid-sexp)
      ("C-M-w" . sp-copy-sexp)
      ("C-M-[" . sp-backward-unwrap-sexp)
      ("C-M-]" . sp-unwrap-sexp)
      ("C-<right>" . sp-forward-slurp-sexp)
      ("C-<left>" . sp-forward-barf-sexp)
      ("C-M-<left>" . sp-backward-slurp-sexp)
      ("C-M-<right>" . sp-backward-barf-sexp))
   #+END_SRC

** helm
** helm
   #+BEGIN_SRC emacs-lisp
     (bind-keys
      ("M-x" . helm-M-x)
      ("M-y" . helm-show-kill-ring))
      (helm-flx-mode +1)
      (setq helm-flx-for-helm-find-files t ;; t by default
      helm-flx-for-helm-locate t) ;; nil by default
   #+END_SRC

   #+RESULTS:
   : helm-select-action

** multiple cursor
   #+BEGIN_SRC emacs-lisp
     (bind-keys
      ("C-<" . mc/mark-previous-like-this)
      ("C->" . mc/mark-next-like-this)
      ("C-*" . mc/mark-all-like-this))
   #+END_SRC

   #+RESULTS:
   : mc/mark-all-like-this

** company
   #+BEGIN_SRC emacs-lisp
     (bind-keys
      ("C-c TAB" . company-complete))
     (eval-after-load 'company
       '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin))
   #+END_SRC
** general
   #+BEGIN_SRC emacs-lisp 
     (bind-keys
      ("M-c" . kill-ring-save)
      ("C-8" . er/expand-region)
      ("M-8" . er/contract-region)
      ("C-x r" . vr/query-replace)
      ("M--" . text-scale-decrease)
      ("M-=" . text-scale-increase)
      ("C-c i" . (lambda () (interactive) (indent-region (point-min) (point-max))))
      ("M-<backspace>" . kill-whole-line)
      ("C-c r" . revert-buffer)
      ("C-3" . back-button-global-backward)
      ("C-4" . back-button-global-forward)
      ("C-c f" . ace-jump-mode)
      ("M-k" . delete-other-windows)
      ("<f7>" . toggle-window-split)
      ("C-c c" . deft)
      ("C-c t" . eshell)
      ("C-S-s" . replace-string)
      ("C-x t" . org-capture)
      ("C-c a" . org-agenda)
      ("C-x C-b" . ibuffer)
      ("C-x w" . ack)
      ("S-C-<left>" . shrink-window-horizontally)
      ("S-C-<left>" . shrink-window-horizontally)
      ("S-C-<right>" . enlarge-window-horizontally)
      ("S-C-<down>" . shrink-window)
      ("S-C-<up>" . enlarge-window))

   #+END_SRC  

   #+RESULTS:
   | lambda | nil | (interactive) | (org-agenda nil n) |

** keychord
   #+BEGIN_SRC emacs-lisp
     (key-chord-define-global "vr" 'vr/replace)
     (key-chord-define-global "ln" 'linum-mode)
   #+END_SRC

   #+RESULTS:
   : org-capture
